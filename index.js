const axios = require("axios");
const crypto = require("crypto");

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å GitHub Secrets (‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô ENV variables)
const API_KEY = process.env.BITKUB_API_KEY;
const API_SECRET = process.env.BITKUB_API_SECRET;

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parameter bot
const SYMBOL = process.env.SYMBOL || "DOGE_THB";  // ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏î
const BUY_AMOUNT_THB = Number(process.env.BUY_AMOUNT) || 30; // 30 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ
const BUY_TRIGGER_PERCENT = Number(process.env.BUY_PERCENT) || 0.7;  // ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏î‡∏•‡∏á 0.5‚Äì1% (‡πÉ‡∏ä‡πâ 0.7% ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
const SELL_TRIGGER_PERCENT = Number(process.env.SELL_PERCENT) || 1.0; // ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 0.7‚Äì1.2% (‡πÉ‡∏ä‡πâ 1% ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)

const host = "https://api.bitkub.com";

function genSign(apiSecret, payloadString) {
  return crypto.createHmac("sha256", apiSecret).update(payloadString).digest("hex");
}

async function getServerTime() {
  const path = "/api/v3/servertime";
  const res = await axios.get(host + path);
  return res.data; // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç timestamp
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getTicker ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ signature)
async function getTicker(symbol) {
  const res = await axios.get(`${host}/api/v3/market/ticker?sym=${symbol}`);
  const tickerData = res.data[0];
  return tickerData?.last ? Number(tickerData.last) : null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getWallet ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
async function getWallet() {
  const path = "/api/v3/market/wallet";
  const ts = await getServerTime();

  const method = "POST";
  const payloadString = ts + method + path + "{}";

  const signature = genSign(API_SECRET, payloadString);

  const headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "X-BTK-TIMESTAMP": ts,
    "X-BTK-SIGN": signature,
    "X-BTK-APIKEY": API_KEY,
  };

  const res = await axios.post(host + path, {}, { headers });
  return res.data.result; // object ‡πÄ‡∏ä‡πà‡∏ô { thb: 12345, doge: 10.123, ... }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (POST /api/v3/market/place-bid)
async function placeBid(symbol, amountTHB, rate) {
  const path = "/api/v3/market/place-bid";
  const ts = await getServerTime();

  const body = {
    sym: symbol,
    amt: amountTHB,
    rat: rate,
    typ: "limit",
  };

  const method = "POST";
  const payloadString = ts + method + path + JSON.stringify(body);
  const signature = genSign(API_SECRET, payloadString);

  const headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "X-BTK-TIMESTAMP": ts,
    "X-BTK-SIGN": signature,
    "X-BTK-APIKEY": API_KEY,
  };

  const res = await axios.post(host + path, body, { headers });
  return res.data;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢ (POST /api/v3/market/place-ask)
async function placeAsk(symbol, amountCoin, rate) {
  const path = "/api/v3/market/place-ask";
  const ts = await getServerTime();

  const body = {
    sym: symbol,
    amt: amountCoin,
    rat: rate,
    typ: "limit",
  };

  const method = "POST";
  const payloadString = ts + method + path + JSON.stringify(body);
  const signature = genSign(API_SECRET, payloadString);

  const headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "X-BTK-TIMESTAMP": ts,
    "X-BTK-SIGN": signature,
    "X-BTK-APIKEY": API_KEY,
  };

  const res = await axios.post(host + path, body, { headers });
  return res.data;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏£‡∏±‡∏ô logic Mini-Scalping
async function runBot() {
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const currentPrice = await getTicker(SYMBOL);
    if (!currentPrice) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ");
      return;
    }
    console.log(`üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á ${SYMBOL}: ${currentPrice}`);

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î wallet
    const wallet = await getWallet();
    if (!wallet) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wallet ‡πÑ‡∏î‡πâ");
      return;
    }


// Get balances

const coin = SYMBOL.split("_")[0]; // ‡∏î‡∏∂‡∏á DOGE ‡∏à‡∏≤‡∏Å DOGE_THB
const thbBalance = parseFloat(wallet["thb"] || 0); // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
const coinBalance = parseFloat(wallet[coin.toLowerCase()] || 0); // ‡πÄ‡∏ä‡πà‡∏ô doge


console.log(`üí∞ ‡∏¢‡∏≠‡∏î THB: ${thbBalance}, ‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${coin}: ${coinBalance}`);



    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    // ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏î‡∏•‡∏á 0.5-1% (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà currentPrice * (1 - BUY_TRIGGER_PERCENT/100))
    const buyPrice = +(currentPrice * (1 - BUY_TRIGGER_PERCENT / 100)).toFixed(6);

    // ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 0.7-1.2% (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà currentPrice * (1 + SELL_TRIGGER_PERCENT/100))
    const sellPrice = +(currentPrice * (1 + SELL_TRIGGER_PERCENT / 100)).toFixed(6);

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (thbBalance >= BUY_AMOUNT_THB) {
      console.log(`‚ö°Ô∏è ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${BUY_AMOUNT_THB} THB ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ ${buyPrice}`);
      const buyRes = await placeBid(SYMBOL, BUY_AMOUNT_THB, buyPrice);
      console.log("üì¶ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:", buyRes);
    } else {
      console.log("‚ùå ‡πÄ‡∏á‡∏¥‡∏ô THB ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠");
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ)
    if (coinBalance > 0) {
      console.log(`‚ö°Ô∏è ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${coinBalance} ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ ${sellPrice}`);
      const sellRes = await placeAsk(SYMBOL, coinBalance, sellPrice);
      console.log("üì¶ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢:", sellRes);
    } else {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢");
    }
  } catch (error) {
    console.error("‚ùå Error:", error.response?.data || error.message);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô bot
runBot();
